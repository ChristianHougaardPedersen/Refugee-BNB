@page "/Update"
@using System.Collections.ObjectModel
@using System.Security.Claims
@using global::Shared.Domain
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@using LogicForPages
@inject HostInterface HostInterface;
@inject RefugeeInterface RefugeeInterface;
@inject AuthInterface authService;
@inject DialogService dialogService;
@inject NavigationManager navMgr;

<h3>Update</h3>

<div class="card">
    <div class="form-group field">

        <RadzenTemplateForm Style="color: #1a1e21; font-weight: bold;" TItem="Person" Data="model" Submit=@UpdateAsync>
            <p>
                <RadzenLabel Component="Password" Text="Password"/>
                <RadzenPassword Name="Password" @bind-Value=@password />
                <RadzenRequiredValidator Component="Password" Text="Password is required!"/>

            </p>

            <p>
                <RadzenLabel Component="Nationality" Text="Nationality"/>
                <RadzenDropDown TValue="string" AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@(Nationalities) Change="@ChangeNationality" Value="@nationality" />
            </p>

            <p>
                <RadzenLabel Component="FirstName" Text="First name"/>
                <RadzenTextBox Name="FirstName" @bind-Value=@firstName />
                <RadzenRequiredValidator Component="FirstName" Text="First name is required!"/>

            </p>

            <p>
                <RadzenLabel Component="MiddleName" Text="Middle name"/>
                <RadzenTextBox Name="MiddleName" @bind-Value=@middleName />
                
            </p>

            <p>
                <RadzenLabel Component="LastName" Text="Last name"/>
                <RadzenTextBox Name="LastName" @bind-Value=@lastName />
                                <RadzenRequiredValidator Component="LastName" Text="Last name is required!"/>

            </p>

            <p>
                <RadzenLabel Component="Gender" Text="Gender"/>
                <RadzenDropDown TValue="string" @bind-Value="gender"  Data=@(GenderCollection) Change="@GenderChange"/>
            </p>
            @if (isRefugee)
            {
                <p>
                    <RadzenLabel Component="familySize" Text="Family Size"/>
                    <RadzenNumeric TValue="int" Min="1" Max="50" @bind-Value=@familysize  />
                </p>
                <p>
                    <RadzenLabel Component="description" Text="Additional Information"/>
                    <RadzenTextArea @bind-Value=@description TValue="string" Change=@DescriptionChange />
                </p>
            }
            <RadzenButton Style="color: white; font-weight: bold; background-color: #6a1a21" ButtonType="ButtonType.Submit" Text="Create" Click="@UpdateAsync"/>

        </RadzenTemplateForm>

        <label style="color: @color">@resultMsg</label>
    </div>
</div>


@code {

    public class Person
    {
    }

    Person model = new Person();

    private string password = "";
    private string nationality = "";
    private string gender = "";
    private string firstName = "";
    private string middleName = "";
    private string lastName = "";
    private int familysize = 0;
    private string description = "";

    public Collection<string> Nationalities = new Collection<string>() { "Danish", "Lithuanian", "Polish", "English", "French", "Ukrainian", "German", "Other" };
    public Collection<string> GenderCollection = new Collection<string>() { "Female", "Male", "Other" };

    private string resultMsg = "";

    private string color = "";

    private bool isRefugee = false;

    private async Task UpdateAsync()
    {
        resultMsg = "";

        if (!isRefugee)
        {
            HostDTO host = await HostInterface.UpdateInformation(new HostUpdateDTO(authService.GetEmail(), password, gender[0], nationality, firstName, middleName, lastName));
            if (host.ErrorMessage.Equals(""))
            {
                resultMsg = "User updated successfully.";
                var dialog = await dialogService.Alert(resultMsg, "Success", new AlertOptions
                {
                    OkButtonText = "Proceed"
                });

                if (dialog.HasValue && dialog.Value)
                {
                    navMgr.NavigateTo("/");
                }
                Console.WriteLine("We updated a host.");
                resultMsg = "User successfully updated";
                color = "green";
            }
            else
            {
                Console.WriteLine(host.ErrorMessage);
                resultMsg = host.ErrorMessage;
                color = "red";
            }
        }
        else 
        {
            RefugeeDTO refugee = await RefugeeInterface.UpdateInformation(new RefugeeUpdateDTO(authService.GetEmail(), password, gender[0], nationality, firstName, middleName, lastName, familysize, description));
            if (refugee.ErrorMessage.Equals(""))
            {
                resultMsg = "User updated successfully.";
                var dialog = await dialogService.Alert(resultMsg, "Success", new AlertOptions
                {
                    OkButtonText = "Proceed"
                });

                if (dialog.HasValue && dialog.Value)
                {
                    navMgr.NavigateTo("/");
                }

                resultMsg = "User successfully created";
                color = "green";
                Console.WriteLine("We created a refugee.");
            }
            else
            {
                Console.WriteLine(refugee.ErrorMessage);
                resultMsg = refugee.ErrorMessage;
                color = "red";
            }
        }
    }

   


    private void ChangeNationality(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        nationality = (string)str;
        Console.WriteLine($"Nationality changed to {str}");
    }


    private void GenderChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        gender = (string)str;
        Console.WriteLine($"Gender changed to {str}");
    }

    private void DescriptionChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        description = (string)str;
        Console.WriteLine($"Description changed to {str}");
    }

    protected override async Task OnInitializedAsync()
    {
        Claim role = authService.GetAuthAsync().Result.Claims.First(claim => claim.Type.Equals("Role"));
        Console.WriteLine("Role: " + role);

        if (role.Value.Equals("REFUGEE"))
        {
            isRefugee = true;
        }
        
        
        if (isRefugee)
        {
            RefugeeDTO dto = await RefugeeInterface.GetRefugee(authService.GetEmail());
            password = "";
            familysize = dto.Refugee.FamilySize;
            description = dto.Refugee.Description;
            nationality = dto.Refugee.Nationality;
            if (dto.Refugee.Gender.ToString().Equals("F"))
            {
                gender = "Female";
            }
            else if (dto.Refugee.Gender.ToString().Equals("M"))
            {
                gender = "Male";
            }else{
                gender = "Other";
            }
            firstName = dto.Refugee.FirstName;
            middleName = dto.Refugee.MiddleName;
            lastName = dto.Refugee.LastName;
        }else
        {
            HostDTO dto = await HostInterface.GetHost(authService.GetEmail());
            password = "";
            nationality = dto.Host.Nationality;
            if (dto.Host.Gender.ToString().Equals("F"))
            {
                gender = "Female";
            }
            else if (dto.Host.Gender.ToString().Equals("M"))
            {
                gender = "Male";
            }else{
                gender = "Other";
            }
            firstName = dto.Host.FirstName;
            middleName = dto.Host.MiddleName;
            lastName = dto.Host.LastName;
        }
    }

}