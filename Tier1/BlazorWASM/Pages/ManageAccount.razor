@page "/ManageAccount"
@using HttpClients.ClientInterfaces
@using global::Shared.DTOs

@inject RefugeeInterface RefugeeInterface;
@inject HostInterface HostInterface;
@inject NavigationManager NavigationManager;

@inject AuthInterface authService;
@inject NavigationManager navMgr;
@inject DialogService dialogService;

<AuthorizeView>
    <Authorized>
        <h3>Manage your account</h3>
        @if (@context.User.Claims.Any(claim => claim.Value.Equals("HOST")))
        {
            <div class="help">
                <div class="help-text">
                    <div class="help-title">Currently logged in as a host:</div>
                    <div class="description"></div>
                </div>
                <div class="provide-help">
                    <RadzenText>@authService.GetEmail()</RadzenText>
                </div>
            </div>
        }
        @if (@context.User.Claims.Any(claim => claim.Value.Equals("REFUGEE")))
        {
            <div class="help">
                <div class="help-text">
                    <div class="help-title">Currently logged in as a refugee:</div>
                    <div class="description"></div>
                </div>
                <div class="provide-help">
                    <RadzenText>@authService.GetEmail()</RadzenText>
                </div>
            </div>
        }
        <div class="help">
                <div class="help-text">
                    <div class="help-title">Log out:</div>
                    <div class="description"></div>
                </div>
                <div class="provide-help">
                    <RadzenButton Style="color:white; font-weight: bold; background-color: #455dc7; margin-bottom: 10px" ButtonType="ButtonType.Submit" Text="Logout" Click="@Logout"/>
                </div>
        </div>
        <div class="help">
            <div class="help-text">
                <div class="help-title">Update your account:</div>
                <div class="description"></div>
            </div>
            <div class="provide-help">
                <RadzenButton Style="color:white; font-weight: bold; background-color: #455dc7; margin-bottom: 10px" ButtonType="ButtonType.Submit" Text="Update" Click="@Update"/>
            </div>
        </div>
        <div class="help">
            <div class="help-text">
                <div class="help-title">Delete your account:</div>
                <div class="description"></div>
            </div>
            <div class="provide-help">
                <RadzenButton Style="color:white; font-weight: bold; background-color: #455dc7; margin-bottom: 10px" ButtonType="ButtonType.Submit" Text="Delete" Click="@DeleteButtonClicked"/>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <RadzenCard>
            <RadzenText>You need to be logged in to view this page.</RadzenText>
            <RadzenImage Path="images/unauthorized.jpg"></RadzenImage>
        </RadzenCard>
    </NotAuthorized>
</AuthorizeView>


@code {

    private string resultMsg = "";
    private string color = "";

    private async void Logout()
    {
        await authService.LogoutAsync();
        navMgr.NavigateTo("/");
    }

    private async Task DeleteAccountAsync()
    {
        string email = authService.GetAuthAsync().Result.Claims.First().Value;
        

        if (authService.GetAuthAsync().Result.Claims.Any(claim => claim.Value.Equals("HOST")))
        {
            try
            {
                HostDTO dto = await HostInterface.DeleteAccountAsync(email);
                await authService.LogoutAsync();
                navMgr.NavigateTo("/");
            }
            catch (Exception e)
            {
                Console.WriteLine("CRASH!: " + e);
                throw;
            }
            
        }
        
        else if (authService.GetAuthAsync().Result.Claims.Any(claim => claim.Value.Equals("REFUGEE")))
        {

            try
            {
                RefugeeDTO dto = await RefugeeInterface.DeleteAccountAsync(email);
                await authService.LogoutAsync();
                navMgr.NavigateTo("/");
            }
            
            catch (Exception e)
            {
                Console.WriteLine("CRASH!: " + e);
                throw;
            }

         
        }
        else
        {
            resultMsg = "No one is currently logged in";
            color = "red";
        }
       
        
    }

    private async void DeleteButtonClicked()
    {
        var areYouSureResult = await dialogService.Confirm("Are you sure you want to delete your account?\nThis action cannot be undone.", "Confirm deletion of account", new ConfirmOptions { OkButtonText = "Delete account", CancelButtonText = "Cancel" });
        if (areYouSureResult.HasValue && areYouSureResult.Value)
        {
            try
            {
                await DeleteAccountAsync();
            }
            catch (Exception e)
            {
               await dialogService.Alert(e.Message, "ERROR");
            }
        }
    }
    
    

    private void Update()
    {
        navMgr.NavigateTo("/Update");
    }

}