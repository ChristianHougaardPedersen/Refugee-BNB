@page "/DisplayHousing"
@using System.Collections.ObjectModel
@using global::Shared.Domain
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@using LogicForPages
@using UIComponents
@inject HousingInterface HousingInterface
@inject AgreementInterface AgreementInterface
@inject HostInterface HostInterface;
@inject AuthInterface authService;
@inject NavigationManager navMgr;
<PageTitle>Available Housing</PageTitle>

<AuthorizeView>
    <Authorized>
        
    </Authorized>
    <NotAuthorized>
      <RadzenCard>
          <RadzenText>You need to be logged in to view this page.</RadzenText>
          <RadzenImage Path="images/unauthorized.jpg"></RadzenImage>
      </RadzenCard>  
    </NotAuthorized>
</AuthorizeView>

<h3>DisplayHousing</h3>




    @foreach (Housing housing in allHousing)
{
    <div class="card" style="width: 700px">
        <div class="col-lg-12 product-title">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-color-secondary">House</RadzenText>
        </div>
        <div >
            <div class="row d-flex">
                <div class="col-lg-2 col-lg-">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">Country</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" class="mb-sm-2 mb-lg-0">@(housing.Address.Country)</RadzenText>
                </div>
                <div class="col-lg-2 ">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">City</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" class="mb-sm-2 mb-lg-0">@(housing.Address.City)</RadzenText>
                </div>
                <div class="col-lg-2 ">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">Street</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" class="mb-sm-2 mb-lg-0">@(housing.Address.StreetName)</RadzenText>
                </div>
                <div class="col-lg-2">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">House Number</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" class="mb-sm-2 mb-lg-0">@(housing.Address.HouseNumber)</RadzenText>
                </div>
                <div class="col-lg-2">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">Room Number</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" class="mb-sm-2 mb-lg-0">@(housing.Address?.RoomNumber)</RadzenText>
                </div>
                <div class="col-lg-2">
                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">Post code</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" class="mb-sm-2 mb-lg-0">@(housing.Address.PostCode)</RadzenText>
                </div>
            </div>
            <div>
                <button class="applyBtn" @onclick="args => ApplyAsync(housing)">Apply for</button>
            </div>
        </div>
    </div>
}



<label style="color: @color">@resultMsg</label>

<Modal ShowModal="showModal">
    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-1">Are you sure you want to apply for that housing?</RadzenText><br/>
    <p>
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">@ownerEmail</RadzenText>
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">@selectedHousing.Address.Country</RadzenText>
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">@selectedHousing.Address.City</RadzenText>
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">@selectedHousing.Address.StreetName</RadzenText>
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">@selectedHousing.Address.HouseNumber</RadzenText>
        @if (!selectedHousing.Address.RoomNumber.Equals(""))
        {
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">@selectedHousing.Address.RoomNumber</RadzenText>
        }
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="mb-0">@selectedHousing.Address.PostCode</RadzenText>
    </p>
    <label style="color: @color">@resultMsg</label>
    <div>
        <RadzenButton Text="Confirm" Click="@ConfirmAsync"/>
        <RadzenButton Text="Cancel" Click="@Cancel"/>
    </div>
</Modal>

@code {
    private List<Housing> allHousing = new List<Housing>();
    private string resultMsg = "";
    private string color = "";
    private Housing selectedHousing = new Housing();
    private string ownerEmail;
    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        
        HousingListDTO dto = await HousingInterface.GetAvailableHousingAsync();
        Console.WriteLine(dto.HousingList.Count);
        if (dto.ErrorMessage.Equals(""))
        {
            allHousing = dto.HousingList;
            resultMsg = "";
        }
        else
        {
            resultMsg = dto.ErrorMessage;
            color = "red";
            if (dto.HousingList.Count == 0)
            {
                resultMsg = "There is no available housing.";
                color = "red";
            }
        }
        
    }


    private async void ConfirmAsync()
    {
        RequestAgreementDTO dto = await AgreementInterface.RequestAgreementAsync(new RequestAgreementDTO(authService.GetEmail(),ownerEmail, selectedHousing,"" ));
        navMgr.NavigateTo("/");

        if (dto.ErrorMessage.Equals(""))
        {
            showModal = false;
            resultMsg = "";
        }
        else
        {
            resultMsg = dto.ErrorMessage;
            color = "red";
        }

    }

    private async Task ApplyAsync(Housing housing)
    {
        selectedHousing = housing;

        Console.WriteLine("Trying to get owner for house: " + housing.HousingId);

        try
        {
            HostDTO owner = await HostInterface.GetHostByHousingIdAsync(selectedHousing.HousingId);
            Console.WriteLine("ERROR: " + owner.ErrorMessage);
            if (owner.ErrorMessage.Equals(""))
            {
                Console.WriteLine("GOT HOST EMAIL: " + ownerEmail);
                ownerEmail = owner.Host.Email;
                Console.WriteLine("GOT HOST EMAIL: " + ownerEmail);
                resultMsg = "";
            }
            else
            {
                resultMsg = owner.ErrorMessage;
                color = "red";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
        
        Console.WriteLine("Selected housing changed to " + selectedHousing.Address.City + ", " + selectedHousing.Address.HouseNumber);
        showModal = true;
    }

    private void Cancel()
    {
        showModal = false;
    }

}