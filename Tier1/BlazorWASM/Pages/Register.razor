@page "/Register"
@using HttpClients.ClientInterfaces
@using global::Shared.Domain
@using System.Collections.ObjectModel
@using System.Text.Json
@using global::Shared.DTOs
@inject HostInterface hostClient;
@inject RefugeeInterface refugeeClient;


<h3>Register</h3>

<div class="card">
    <div class="form-group field">

        <RadzenTemplateForm Style="color: #1a1e21; font-weight: bold;" TItem="Person" Submit=@Create>
            <p>
                <RadzenLabel Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value=@email />
                <RadzenRequiredValidator Component="Email" Text="Email is required!"/>

            </p>
            <p>
                <RadzenLabel Component="Password" Text="Password"/>
                <RadzenPassword @bind-Value=@password />
                <RadzenRequiredValidator Component="Password" Text="Password is required!"/>
            </p>

            <p>
                <RadzenLabel Component="Nationality" Text="Nationality"/>
                <RadzenTextBox Name="Nationality" @bind-Value=@nationality />
                <RadzenRequiredValidator Component="Nationality" Text="Nationality is required!"/>
            </p>

            <p>
                <RadzenLabel Component="FirstName" Text="First name"/>
                <RadzenTextBox Name="FirstName" @bind-Value=@firstName />
                <RadzenRequiredValidator Component="FirstName" Text="First name is required!"/>
            </p>

            <p>
                <RadzenLabel Component="MiddleName" Text="Middle name"/>
                <RadzenTextBox Name="MiddleName" @bind-Value=@middleName />
            </p>

            <p>
                <RadzenLabel Component="LastName" Text="Last name"/>
                <RadzenTextBox Name="LastName" @bind-Value=@lastName />
                <RadzenRequiredValidator Component="LastName" Text="Last name is required!"/>
            </p>

            <p>
                <RadzenLabel Component="Gender" Text="Gender"/>
                <RadzenTextBox Name="Gender" @bind-Value=@gender />
                <RadzenRequiredValidator Component="Gender" Text="Gender is required!"/>
            </p>

            <p>
                <RadzenLabel Component="PersonType" Text="Who are you?"/>
                <RadzenDropDown TValue="string" Data=@(PersonTypeCollection) Change="@OnChange"/>
            </p>

            <p>
                <label for="dateOfBirth">Date of birth:</label>
                <input type="date" id="dateOfBirth" name="dateofBirth" @bind="date">
            </p>

            <RadzenButton Style="color: white; font-weight: bold; background-color: #6a1a21" ButtonType="ButtonType.Submit" Text="Create" Click="@Create"/>

        </RadzenTemplateForm>

        <label style="color: @color">@resultMsg</label>
    </div>
</div>


@code {

    class Person
    {
    }


    private string email = "";
    private string password = "";
    private string nationality = "";
    private string personType = "";
    private string gender = "";
    private string firstName = "";
    private string middleName = "";
    private string lastName = "";
    DateOnly date = new DateOnly(2011, 11, 11);

    public Collection<string> PersonTypeCollection = new Collection<string>() { "I am a Host.", "I am a Refugee." };

    private string resultMsg = "";

    private string color = "";

    private async Task Create()
    {
        resultMsg = "";
        Date dateOfBirth = new Date(date.Day, date.Month, date.Year);

        if (personType.Contains("host"))
        {
            try
            {
                await hostClient.RegisterHostAsync(new HostRegisterDTO(email, password, gender[0], nationality, firstName, lastName, middleName, dateOfBirth));
                Console.WriteLine("We created a host.");
                Clear();
                resultMsg = "User successfully created";
                color = "green";
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                resultMsg = e.Message;
                color = "red";
            }
        }
        else if (personType.Contains("refugee"))
        {
            try
            {
                Console.Write("BUTTON CLICKED");
                await refugeeClient.RegisterRefugee(new RefugeeRegisterDTO(email, password, gender[0], nationality, firstName, lastName, middleName, dateOfBirth));
                Console.Write("AFTER CALL");
                
                Clear();
                resultMsg = "User successfully created";
                color = "green";
                Console.WriteLine("We created a refugee.");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                resultMsg = e.Message;
                color = "red";
            }
        }
    }

    private void Clear()
    {
        email = "";
        password = "";
        nationality = "";
        personType = "";
        gender = "";
        firstName = "";
        middleName = "";
        lastName = "";
        date = new DateOnly(2011, 11, 11);
    }

    private void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        if (str.Equals("I am a Host."))
        {
            personType = "host";
        }
        else
        {
            personType = "refugee";
        }

        Console.WriteLine($"Value changed to {str}");
    }

}