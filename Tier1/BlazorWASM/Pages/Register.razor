@page "/Register"
@using HttpClients.ClientInterfaces
@using global::Shared.Domain
@using System.Collections.ObjectModel
@using global::Shared.DTOs
@inject AuthInterface authService;
@inject DialogService dialogService;
@inject NavigationManager navMgr;

<h3>Register</h3>

<div class="card">
    <div class="form-group field">

        <RadzenTemplateForm Style="color: #1a1e21; font-weight: bold;" TItem="Person" Submit=@CreateAsync>
            
            <p>
                <RadzenLabel Component="PersonType" Text="Who are you?"/>
                
                <RadzenRadioButtonList TValue="int?" Change=@((args) => OnChange(args.Value))>
                    <Items>
                        <RadzenRadioButtonListItem Text="Host" Value="1" TValue="int?" />
                        <RadzenRadioButtonListItem Text="Refugee" Value="2" TValue="int?" />
                    </Items>
                </RadzenRadioButtonList>
            </p>
            
            <p>
                <RadzenLabel Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value=@email></RadzenTextBox>

            </p>
            <p>
                <RadzenLabel Component="Password" Text="Password"/>
                <RadzenPassword @bind-Value=@password />
            </p>

            <p>
                <RadzenLabel Component="Nationality" Text="Nationality"/>
                <RadzenDropDown TValue="string" AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@(Nationalities) Change="@ChangeNationality"/>
            </p>

            <p>
                <RadzenLabel Component="FirstName" Text="First name"/>
                <RadzenTextBox Name="FirstName" @bind-Value=@firstName />
            </p>

            <p>
                <RadzenLabel Component="MiddleName" Text="Middle name"/>
                <RadzenTextBox Name="MiddleName" @bind-Value=@middleName />
            </p>

            <p>
                <RadzenLabel Component="LastName" Text="Last name"/>
                <RadzenTextBox Name="LastName" @bind-Value=@lastName />
            </p>

            <p>
                <RadzenLabel Component="Gender" Text="Gender"/>
                <RadzenDropDown TValue="string" Data=@(GenderCollection) Change="@GenderChange"/>
            </p>


            <p>
                <label for="dateOfBirth">Date of birth:</label>
                <input type="date" id="dateOfBirth" name="dateofBirth" @bind="date">
            </p>

            <RadzenButton Style="color: white; font-weight: bold; background-color: #6a1a21" ButtonType="ButtonType.Submit" Text="Create" Click="@CreateAsync"/>

        </RadzenTemplateForm>

        @if (showAlert)
        {
            <RadzenAlert AlertStyle=@alertStyle AllowClose="false">@resultMsg</RadzenAlert>
        }
    </div>
</div>


@code {

    class Person
    {
    }


    private string email = "";
    private string password = "";
    private string nationality = "";
    private string personType = "";
    private string gender = "";
    private string firstName = "";
    private string middleName = "";
    private string lastName = "";
    DateOnly date = new DateOnly(2011, 11, 11);

    public Collection<string> Nationalities = new Collection<string>() { "Danish", "Lithuanian", "Polish", "English", "French", "Ukrainian", "German", "Other" };
    public Collection<string> GenderCollection = new Collection<string>() { "Female", "Male", "Other" };

    private bool showAlert;
    private AlertStyle alertStyle;
    private string resultMsg = "";

    private string color = "";

    private async Task CreateAsync()
    {
        
        resultMsg = "";
        Date dateOfBirth = new Date(date.Day, date.Month, date.Year);

        try
        {
            CheckValues();
            
            if (personType.Contains("host"))
            {

                HostDTO host = await authService.RegisterHostAsync(new HostRegisterDTO(email, password, gender[0], nationality, firstName, middleName, lastName, dateOfBirth));
            }
            else if (personType.Contains("refugee"))
            {
                RefugeeDTO refugee = await authService.RegisterRefugeeAsync(new RefugeeRegisterDTO(email, password, gender[0], nationality, firstName, middleName, lastName, dateOfBirth));
            }
            
            Clear();
            var dialogResult = await dialogService.Alert("Registration complete. Click proceed to go to login", "Success", new AlertOptions { OkButtonText = "Go to login" });
            if (dialogResult.HasValue && dialogResult.Value)
            {
                navMgr.NavigateTo("/Login");
            }

        }
        catch (Exception e)
        {
            showAlert = true;
            resultMsg = e.Message;
            alertStyle = AlertStyle.Danger;
        }

    }

    private void CheckValues()
    {
        if (string.IsNullOrWhiteSpace(personType))
        {
            throw new Exception("Please select which type of account to register for");
        }
        if (string.IsNullOrWhiteSpace(email))
        {
            throw new Exception("Email must be set");
        }
        if (!email.Contains(".") || !email.Contains("@"))
        {
            throw new Exception("Please enter a valid email");
        }
        if (string.IsNullOrWhiteSpace(password))
        {
            throw new Exception("Password must be set");
        }
        if (string.IsNullOrWhiteSpace(nationality))
        {
            throw new Exception("Please select a nationality");
        }
        if (string.IsNullOrWhiteSpace(firstName))
        {
            throw new Exception("First name must be set");
        }
        if (string.IsNullOrWhiteSpace(lastName))
        {
            throw new Exception("Last name must be set");
        }
        if (string.IsNullOrWhiteSpace(gender))
        {
            throw new Exception("Please select a gender");
        }
    }
    private void Clear()
    {
        email = "";
        password = "";
        nationality = "";
        personType = "";
        gender = "";
        firstName = "";
        middleName = "";
        lastName = "";
        date = new DateOnly(2011, 11, 11);
        showAlert = false;
    }
    private void OnChange(int value)
    {
        Console.WriteLine("Value changed to: " + value);

        if (value == 1)
        {
            personType = "host";
        }
        if (value == 2)
        {
            personType = "refugee";
        }
    }
    private void ChangeNationality(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        nationality = (string)str;
        Console.WriteLine($"Value changed to {str}");
    }
    private void GenderChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        gender = (string)str;
        Console.WriteLine($"Value changed to {str}");
    }
    

}