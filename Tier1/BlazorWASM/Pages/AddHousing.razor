@page "/AddHousing"
@using global::Shared.DTOs
@using System.Collections.ObjectModel
@using HttpClients.ClientInterfaces
@inject HousingInterface HousingInterface;

<h3>AddHousing</h3>

<div class="card">
    <div class="form-group field">

        <RadzenTemplateForm Style="color: #1a1e21; font-weight: bold;" TItem="Person" Data="@model" Submit=@Create>
            <p>
                <RadzenLabel Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value=@hostEmail />
                <RadzenRequiredValidator Component="Email" Text="Email is required!"/>

            </p>

            <p>
                <RadzenLabel Component="country" Text="Country"/>
                <RadzenDropDown TValue="string" AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@(Countries) Change="@ChangeCountry" Value="Countries.First()"/>
            </p>

            <p>
                <RadzenLabel Component="city" Text="City"/>
                <RadzenTextBox Name="city" @bind-Value=@city />
                <RadzenRequiredValidator Component="city" Text="city is required!"/>
            </p>

            <p>
                <RadzenLabel Component="streetName" Text="Street name"/>
                <RadzenTextBox Name="streetName" @bind-Value=@streetName />
                <RadzenRequiredValidator Component="streetName" Text="streetName name is required!"/>
            </p>

            <p>
                <RadzenLabel Component="houseNumber" Text="House number"/>
                <RadzenTextBox Name="houseNumber" @bind-Value=@houseNumber />
                <RadzenRequiredValidator Component="streetName" Text="streetName name is required!"/>
            </p>

            <p>
                <RadzenLabel Component="roomNumber" Text="Room number"/>
                <RadzenTextBox Name="roomNumber" @bind-Value=@roomNumber />
            </p>

            <p>
                <RadzenLabel Component="postCode" Text="Post code"/>
                <RadzenTextBox Name="postCode" @bind-Value=@postCode />
                <RadzenRequiredValidator Component="postCode" Text="postCode name is required!"/>
            </p>

            <p>
                <RadzenLabel Component="capacity" Text="Capacity"/>
                <RadzenNumeric TValue="int" Min="1" Max="10" @bind-Value=@capacity />
                <RadzenRequiredValidator Component="capacity" Text="capacity name is required!"/>
            </p>


            <RadzenButton Style="color: white; font-weight: bold; background-color: #6a1a21" ButtonType="ButtonType.Submit" Text="Create" Click="@Create"/>

        </RadzenTemplateForm>

        <label style="color: @color">@resultMsg</label>
    </div>
</div>

@code {

    public class Person
    {
    }

    Person model = new Person();
    
    private string country = "";
    private string city = "";
    private string streetName = "";
    private string houseNumber = "";
    private string roomNumber = "";
    private string postCode = "";
    private int capacity = 0;
    private string hostEmail = "";
    private string resultMsg = "";
    private string color = "";

    public Collection<string> Countries = new Collection<string>() { "Denmark", "Lithuania", "Poland", "France", "Germany", "Ukraine", "Other" };


    private async Task Create()
    {
        resultMsg = "";
        
            HousingDTO housing = await HousingInterface.AddHousingAsync(new HousingCreationDTO(country, city, streetName, houseNumber, roomNumber, postCode, capacity, hostEmail));
            if (housing.ErrorMessage.Equals(""))
            {
                Console.WriteLine("We added a housing to: " + hostEmail);
                Clear();
                resultMsg = "User successfully created";
                color = "green";
            }
            else
            {
                Console.WriteLine(housing.ErrorMessage);
                resultMsg = housing.ErrorMessage;
                color = "red";
            }
        
    }

    private void Clear()
    {
        country = "";
        city = "";
        streetName = "";
        houseNumber = "";
        roomNumber = "";
        postCode = "";
        capacity = 0;
        hostEmail = "";
    }


    private void ChangeCountry(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        country = (string)str;
        Console.WriteLine($"Value changed to {str}");
    }

    protected override void OnInitialized()
    {
        country = "Denmark";
    }

}