@page "/Login"
@using HttpClients.ClientInterfaces
@using System.Collections.ObjectModel
@using System.Security.Claims
@using global::Shared.Domain
@using global::Shared.DTOs
@using LogicForPages
@inject HostInterface HostInterface;
@inject RefugeeInterface RefugeeInterface;
@inject NavigationManager navMgr;

@inject MenuService MenuService;
@inject AuthInterface authService;



    <h3>Login</h3>
    <div class="card">
        <div class="form-group field">
            <RadzenTemplateForm Style="color: #1a1e21; font-weight: bold;" TItem="LoginDTO" Submit=@OnLogin>

                <p>
                    <RadzenLabel Component="Email" Text="Email"/>
                    <RadzenTextBox Name="Email" @bind-Value=@email></RadzenTextBox>
                    <RadzenRequiredValidator Component="Email" Text="Email is required!"/>

                </p>
                <p>
                    <RadzenLabel Component="Password" Text="Password"/>
                    <RadzenPassword @bind-Value=@password></RadzenPassword>
                    <RadzenRequiredValidator Component="Password" Text="Password is required!"/>
                </p>

                <RadzenButton Style="color: white; font-weight: bold; background-color: #455dc7" ButtonType="ButtonType.Submit" Text="Login" Click="@OnLogin"/>
                <label style="color: @color">@resultMsg</label>
            </RadzenTemplateForm>
        </div>
        
        @if (ShowAlert)
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" AllowClose="false">@alertText</RadzenAlert>
        }
    </div>



@code {

    private string email { get; set; }
    private string password { get; set; }
   
    private string resultMsg = "";
    private string color = "GREEN";

    private bool ShowAlert = false;
    private string alertText = "";
    


    private async Task OnLogin()
    {
        ShowAlert = false;
        alertText = "";
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            ShowAlert = true;
            alertText = "Email and password fields must be filled!";
            
            return;
        }

        try
        {
            await DoLogin();
        }
        catch (Exception e)
        {
            ShowAlert = true;
            alertText = e.Message;
        }
        
        
        resultMsg = "";
      
    }

    private async Task DoLogin()
    {
        try
        {
            await authService.LoginAsync(new LoginDTO(email, password));

            Claim role = authService.GetAuthAsync().Result.Claims.First(claim => claim.Type.Equals("Role"));
            Console.WriteLine("Logged in as: " + role.Value);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            ShowAlert = true;
            alertText = e.Message;
        }
    }
}